tomka, alonemanuel
Tom Kalir (316426485), Alon Emanuel (205894058)
EX: 2

FILES:
sleeping_threads_list.h -- a file with some code
sleeping_threads_list.cpp -- a file with some code
thread.h -- a file with some code
thread.cpp -- a file with some code
uthreads.cpp -- a file with some code

REMARKS:

ANSWERS:

Question 1:

User level threads are unseen by the kernel, thus making them much more agile and lightweight.
They give the user more control over scheduling and resource management.
A good use for user-level threads in our example is the way we make scheduling decisions -
each threads can receive a very small quantum, and due to the smart on-the-fly scheduling,
the threads are perceived to be running simultaneously.

Question 2:

Advantages:
1. Memory and resource management is made easier and more beneficial -
when a tab is closed (or minimized\hidden), its resources can
be freed or shared among other currently-active processes.
2. Bugs and crashes are focused to the specific tab (=process), thus giving 
the browser a more stable performance that can 'survive' tab-specific errors.

Disadvantages:
1. As opposed to user-level threads, each process creates a lot of overhead
and is considered to be slow and inefficient.
2. Although resource management is indeed efficient in chrome's implementation,
but resource *use* and demand is greater, due to the need to store data for each of these
processes (which are not 'hidden' from the OS like user-level threads are).



Question 3:

When hitting the keyboard keys to enter "shotrell", interrupts are sent to the OS, telling it that a key
was pressed. It then acts according to the handler it set for those interrupts.
When sending the command "ps -A", we can see the long list of sigactions that are done, connecting different signals
to their appropriate handlers. For instance, SIGABRT is handled by some specific handler.
At the end of the 'kill pid' statement, we see a SIGTERM signal, whose job is to terminate the process in a 'supervised' way,
meaning it's threads can exit correctly.


Question 4:
As described in "man itimer":
Real time 'passes' as real-life time, 
while virtual time passes only when the process is executing.
We use *virtual* time in our quantum timer - it sends a signal when a virtual quantum has passed.
We use *real* time in our sleep timer - it send a signal when a real time 'unit' has passed.